log(10)
log(10)/log(e)
log(10)/log(E)
log(10)/log(2.78)
log(10)/log(2.18)
log(2.78)
2.78^-0.1754874
y[13]/x[13]
log(y[13]/x[13])
log(x[13]/y[13])
```{r include=TRUE}
data <- read.csv( unz( "activity.zip", "activity.csv" ) )
`r opts_chunk$set(cache=FALSE, echo=TRUE)`
data <- read.csv( unz( "activity.zip", "activity.csv" ) )
getwd()
setwd("~/GitHub/RepData_PeerAssessment1")
? knit
?knit
??knit
?knitr
? knitr
??knitr
library("knitr", lib.loc="C:/Program Files/R/R-3.1.0/library")
data <- read.csv( unz( "activity.zip", "activity.csv" ) )
dates <- levels( data[,2] )
totalStepsOn <- function(specificDate){
return( sum( data[which(data$date == specificDate),]$steps ) )
}
totalSteps <- sapply(dates,totalStepsOn)
hist( totalSteps, main = "Histogram of Total Number of Steps Taken Each Day", xlab = "Total Number of Steps Taken" )
x <- mean(totalSteps, na.rm=TRUE)
y <- median(totalSteps, na.rm=TRUE)
z <- 2
meanPerDay <- round(mean(totalSteps, na.rm=TRUE)))
mean(totalSteps, na.rm=TRUE)
typeof(mean(totalSteps, na.rm=TRUE))
as.integer( (mean(totalSteps, na.rm=TRUE)) )
meanPerDay <- round(mean(totalSteps, na.rm=TRUE)))
meanPerDay <- round(mean(totalSteps, na.rm=TRUE))
?options
getOption('digits')
round(meanPerDay)
meanPerDay <- toString(mean(totalSteps, na.rm=TRUE))
seq(0,471,5)
seq(0,2360,5)
seq(0,2355,5)
times <- seq(0,2355,5)
averageStepsFor <- function(time){
return( mean( data[,which(data$interval == time)]$steps ) )
}
averageStepsFor(0)
averageStepsFor <- function(time){
return( mean( data[,which(data$interval == time)]$steps, na.rm=TRUE ) )
}
averageStepsFor(0)
averageStepsFor("0")
data[,which(data$interval == 0)]
averageStepsFor <- function(time){
return( mean( data[which(data$interval == time),]$steps, na.rm=TRUE ) )
}
averageStepsFor(0)
averageStepsFor(1)
averageStepsFor(5)
averageSteps <- sapply(times,averageStepsFor)
averageSteps
totalSteps
averageSteps <- lapply(times,averageStepsFor)
averageSteps
averageSteps <- sapply(times,averageStepsFor)
plot(times, averageSteps, type="1")
plot(times, averageSteps, type="l")
data[which(data$interval == 0),]
data[which(data$interval == 5),]
data[which(data$interval == 10),]
data[which(data$interval == 15),]
data[which(data$interval == 20),]
data[which(data$interval == 25),]
averageSteps
data[which(data$interval == 13*5),]
13*5
data[which(data$interval == 65),]
max(data$interval)
averageStepsFor <- function(time){
return(c(mean(data[which(data$interval==time), ]$steps, na.rm=TRUE)),time)
}
averageSteps <- sapply(times,averageStepsFor)
averageStepsFor <- function(time){
return(mean(data[which(data$interval == time), ]$steps, na.rm = TRUE))
}
averageSteps <- sapply(times,averageStepsFor, USE.NAMES = TRUE)
averageSteps
which(averageSteps > 5)
names(averageSteps)
averageSteps <- sapply(as.character(times),averageStepsFor, USE.NAMES = TRUE)
averageSteps
plot(times, averageSteps, type = "l", main = "Average Number of Steps Taken vs. Time",
xlab = "Time (minutes)", ylab = "Average Number of Steps Taken")
which(averageSteps>5)
which(averageSteps==max(averageSteps))
max(averageSteps)
which(averageSteps==max(averageSteps, na.rm = TRUE))
as.name(which(averageSteps==max(averageSteps, na.rm = TRUE)))
as.symbol(which(averageSteps==max(averageSteps, na.rm = TRUE)))
name(averageSteps)
names(averageSteps)
names(averageSteps)[183]
names(averageSteps)[168]
names[averageSteps==max(averageSteps, na.rm = TRUE)]
names[which(averageSteps==max(averageSteps, na.rm = TRUE))]
which(averageSteps==max(averageSteps, na.rm = TRUE))
averageSteps <- sapply(as.character(times),averageStepsFor)
names[which(averageSteps==max(averageSteps, na.rm = TRUE))]
averageSteps
which(averageSteps==max(averageSteps, na.rm = TRUE))
names(averageSteps)[which(averageSteps==max(averageSteps, na.rm = TRUE))]
maxNumberOfSteps <- integer(names(averageSteps)[which(averageSteps==max(averageSteps, na.rm = TRUE))])
maxNumberOfSteps <- names(averageSteps)[which(averageSteps==max(averageSteps, na.rm = TRUE))]
maxNumberOfSteps <- as.integer(names(averageSteps)[which(averageSteps==max(averageSteps, na.rm = TRUE))])
is.na(data)
data[is.na(data$steps)==TRUE,]
data2<-data[is.na(data$steps)==TRUE,]
length(data[is.na(data$steps)==TRUE,])
nrows(data[is.na(data$steps)==TRUE,])
nrow(data[is.na(data$steps)==TRUE,])
data2 <- data
data2[(data$interval == 5) && (is.na(data$steps) == TRUE),]
data2[(data$interval == 65) && (is.na(data$steps) == TRUE),]
data2[(data$interval == 70) && (is.na(data$steps) == TRUE),]
data2[(data$interval == 5) && (is.na(data$steps) == TRUE),]
data2[(data$interval == "5") && (is.na(data$steps) == TRUE),]
data2[(data2$interval == "5") && (is.na(data2$steps) == TRUE),]
data2[(data2$interval == 5) && (is.na(data2$steps) == TRUE),]
data2[(data2$interval == 5) && (is.na(data2$steps) == "TRUE"),]
data2[(data2$interval == 5) && (is.na(data2$steps) == "TRUE"),]
data2[1,1]
is.na(data2[1,1])
is.na(data2[1,1])==TRUE
data2[(data2$interval == 5) & (is.na(data2$steps) == "TRUE"),]
data2[(data2$interval == 5) & (is.na(data2$steps) == "TRUE"),]<-0
data2[(data2$interval == 5) & (is.na(data2$steps) == "TRUE"),] <- 0
data2[(data2$interval == 5) & (is.na(data2$steps) == "TRUE"),][1,] <- 0
data2[(data2$interval == 5) & (is.na(data2$steps) == "TRUE"),][,1] <- 0
data2[(data2$interval == 5) & (is.na(data2$steps) == "TRUE"),][,1]
data2[(data2$interval == 5) & (is.na(data2$steps) == "TRUE"),]
View(data2)
View(data2)
data2<-data
data2[(data2$interval == 5) & (is.na(data2$steps) == "TRUE"),]
data2[(data2$interval == 5) & (is.na(data2$steps) == "TRUE"),][,1]
data2[(data2$interval == 5) & (is.na(data2$steps) == "TRUE"),][,1]<-0
data2[(data2$interval == 5) & (is.na(data2$steps) == "TRUE"),][,1]
View(data2)
View(data2)
data2<-data
data2 <- data
replaceMissingValues <- function(time){
initialMedian <- median(data[which(data$interval == time), ]$steps, na.rm = TRUE))
data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),][,1]<-initialMedian
}
replaceMissingValues <- function(time){
initialMedian <- median(data[which(data$interval == time), ]$steps, na.rm = TRUE))
data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),][,1]<-initialMedian
}
replaceMissingValues <- function(time){
initialMedian <- median(data[which(data$interval == time), ]$steps, na.rm = TRUE)
data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),][,1]<-initialMedian
}
replaceMissingValues <- function(time){
initialMedian <- median(data[which(data$interval == time), ]$steps, na.rm = TRUE)
data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),][,1]<-initialMedian
}
for(time in times) replaceMissingValues(time)
data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),]
length(data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),])
nrow(data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),])
replaceMissingValues <- function(time){
initialMedian <- median(data[which(data$interval == time), ]$steps, na.rm = TRUE)
if(nrow(data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),]) != 0){
data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),][,1]<-initialMedian
}
}
data2 <- data
for(time in times) replaceMissingValues(time)
```{r <<chunkB, ref.label=chunkA>>}
totalStepsOn <- function(specificDate,dataSheet){
return(sum(dataSheet[which(dataSheet$date == specificDate), ]$steps))
}
totalSteps <- sapply(dates,totalStepsOn,dataSheet = data)
View(data2)
View(data)
View(data2)
totalSteps2 <- sapply(dates,totalStepsOn,dataSheet = data2)
replaceMissingValues <- function(time){
initialMedian <- median(data[which(data$interval == time), ]$steps, na.rm = TRUE)
if(nrow(data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),]) != 0){
data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),][,1]<-initialMedian
}
}
totalSteps2 <- sapply(dates,totalStepsOn,dataSheet = data2)
View(data2)
initialMedian <- median(data[which(data$interval == time), ]$steps, na.rm = TRUE)
for(time in times) replaceMissingValues(time)
View(data2)
View(data2)
replaceMissingValues(0)
View(data2)
View(data2)
replaceMissingValues <- function(time){
initialMedian <- median(data[which(data$interval == time), ]$steps, na.rm = TRUE)
if(nrow(data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),]) != 0){
print(hello)
data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),][,1]<-initialMedian
}
}
replaceMissingValues(0)
replaceMissingValues <- function(time){
initialMedian <- median(data[which(data$interval == time), ]$steps, na.rm = TRUE)
if(nrow(data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),]) != 0){
print("hello")
data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),][,1]<-initialMedian
}
}
replaceMissingValues(0)
replaceMissingValues(5)
replaceMissingValues(10)
View(data2)
View(data2)
initialMedian <- median(data[which(data$interval == 0), ]$steps, na.rm = TRUE)
initialMedian <- median(data[which(data$interval == 5), ]$steps, na.rm = TRUE)
initialMedian <- median(data[which(data$interval == 10), ]$steps, na.rm = TRUE)
initialMedian <- median(data[which(data$interval == 15), ]$steps, na.rm = TRUE)
medianMan <- function(time){ return(median(data[which(data$interval == time), ]$steps, na.rm = TRUE)) }
sapply(times, medianMan)
meanMan <- function(time){ return(mean(data[which(data$interval == time), ]$steps, na.rm = TRUE)) }
sapply(times, meanMan)
replaceMissingValues <- function(time){
initialMedian <- median(data[which(data$interval == time), ]$steps, na.rm = TRUE)
if(nrow(data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),]) != 0){
data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),][,1]<<-initialMedian
}
}
for(time in times) replaceMissingValues(time)
View(data2)
View(data2)
weekdays(2012-10-01)
weekdays("2012-10-01")
weekdays(2012-10-01)
weekdays(2012-10-01, abbreviate = FALSE)
weekdays(as.Date("2012-10-01"), abbreviate = FALSE)
whichPartOfWeek <- function(stringDate){
day = weekdays(as.Date(stringDate), abbreviate = False)
if(day == "Saturday" | day == "Sunday"){
return 1
}
else{
return 0
}
}
whichPartOfWeek <- function(stringDate){
day = weekdays(as.Date(stringDate), abbreviate = False)
if(day == "Saturday" || day == "Sunday"){
return 1
}
else{
return 0
}
}
whichPartOfWeek <- function(stringDate){
day = weekdays(as.Date(stringDate), abbreviate = False)
if((day == "Saturday") || (day == "Sunday")){
return 1
}
else{
return 0
}
}
weekdays(as.Date(stringDate), abbreviate = False)
whichPartOfWeek <- function(stringDate){
day <- weekdays(as.Date(stringDate), abbreviate = False)
if((day == "Saturday") || (day == "Sunday")){
return 1
}
else{
return 0
}
}
whichPartOfWeek <- function(stringDate){
day <- weekdays(as.Date(stringDate), abbreviate = False)
if((day == "Saturday") || (day == "Sunday")){
return 1
}
else{
return 0
}
}
whichPartOfWeek <- function(stringDate){
day <- weekdays(as.Date(stringDate), abbreviate = False)
if((day == "Saturday") || (day == "Sunday")){
1
}
else{
0
}
}
data2$partofweek <- apply(data2,1,function(row[2]))
data2$partofweek <- apply(data2,1,whichPartOfWeek(row[2]))
View(data2)
View(data2)
data2$partofweek <- apply(data2,1,whichPartOfWeek(row[2]))
data2$partofweek <- apply(data2,c(1,2),whichPartOfWeek)
data2$partofweek <- apply(data2$date,1,whichPartOfWeek)
data2$date
dim(data2$date)
? dim
data2$partofweek <- apply(data2[,2],1,whichPartOfWeek)
data2$partofweek <- sapply(data2$date,whichPartOfWeek)
whichPartOfWeek <- function(stringDate){
day <- weekdays(as.Date(stringDate), abbreviate = FALSE)
if((day == "Saturday") || (day == "Sunday")){
1
}
else{
0
}
}
data2$partofweek <- sapply(data2$date,whichPartOfWeek)
View(data2)
View(data2)
data2[1007,]
data2[10014,]
data2$partofweek <- factor(data2$partofweek, labels = c("weekday", "weekend"))
View(data2)
View(data2)
data2$partofweek
whichPartOfWeek <- function(stringDate){
day <- weekdays(as.Date(stringDate), abbreviate = FALSE)
ifelse((day == "Saturday") || (day == "Sunday"), 1, 0}
}
whichPartOfWeek <- function(stringDate){
day <- weekdays(as.Date(stringDate), abbreviate = FALSE)
ifelse((day == "Saturday") || (day == "Sunday"), 1, 0)
}
whichPartOfWeek <- function(stringDate){
day <- weekdays(as.Date(stringDate), abbreviate = FALSE)
ifelse((day == "Saturday") || (day == "Sunday"), 1, 0)
}
data2$partofweek <- sapply(data2$date,whichPartOfWeek)
data2$partofweek <- factor(data2$partofweek, labels = c("weekday", "weekend"))
data2 <- data
replaceMissingValues <- function(time){
initialMedian <- median(data[which(data$interval == time), ]$steps, na.rm = TRUE)
if(nrow(data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),]) != 0){
data2[(data2$interval == time) & (is.na(data2$steps) == TRUE),][,1]<<-initialMedian
}
}
for(time in times) replaceMissingValues(time)
totalSteps2 <- sapply(dates,totalStepsOn,dataSheet = data2)
hist(totalSteps2, main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total Number of Steps Taken", sub = "(with the missing data filled in)")
meanPerDay2 <- toString(round(mean(totalSteps2, na.rm = TRUE), 1))
medianPerDay2 <- median(totalSteps2, na.rm = TRUE)
whichPartOfWeek <- function(stringDate){
day <- weekdays(as.Date(stringDate), abbreviate = FALSE)
ifelse((day == "Saturday") || (day == "Sunday"), 1, 0)
}
data2$partofweek <- sapply(data2$date,whichPartOfWeek)
data2$partofweek <- factor(data2$partofweek, labels = c("weekday", "weekend"))
averageSteps2weekend <- sapply(as.character(times),averageStepsFor,
dataSheet = data2[which(data2$partofweek == weekend),])
averageSteps2weekday <- sapply(as.character(times),averageStepsFor,
dataSheet = data2[which(data2$partofweek == weekday),])
par(mfrow=c(2,1))
plot(times, averageSteps2weekend, type = "l", main = "weekend",
xlab = "Time (minutes)", ylab = "Average Number of Steps Taken")
plot(times, averageSteps2weekday, type = "l", main = "weekday",
xlab = "Time (minutes)", ylab = "Average Number of Steps Taken")
averageSteps2weekend <- sapply(as.character(times),averageStepsFor,
dataSheet = data2[which(data2$partofweek == "weekend"),])
averageSteps2weekday <- sapply(as.character(times),averageStepsFor,
dataSheet = data2[which(data2$partofweek == "weekday"),])
averageSteps2weekend <- sapply(times,averageStepsFor,
dataSheet = data2[which(data2$partofweek == "weekend"),])
averageSteps2weekday <- sapply(times,averageStepsFor,
dataSheet = data2[which(data2$partofweek == "weekday"),])
data2[which(data2$partofweek == "weekend"),]
sapply(times,averageStepsFor,
dataSheet = data2[which(data2$partofweek == "weekend"),])
averageStepsFor <- function(time,dataSheet){
return(mean(dataSheet[which(dataSheet$interval == time), ]$steps, na.rm = TRUE))
}
averageSteps2weekend <- sapply(times,averageStepsFor,
dataSheet = data2[which(data2$partofweek == "weekend"),])
averageSteps2weekday <- sapply(times,averageStepsFor,
dataSheet = data2[which(data2$partofweek == "weekday"),])
par(mfrow=c(2,1))
plot(times, averageSteps2weekend, type = "l", main = "weekend",
xlab = "Time (minutes)", ylab = "Average Number of Steps Taken")
plot(times, averageSteps2weekday, type = "l", main = "weekday",
xlab = "Time (minutes)", ylab = "Average Number of Steps Taken")
plot(times, averageSteps2weekend, type = "l", main = "weekend",
ylab = "Average Number of Steps Taken")
plot(times, averageSteps2weekday, type = "l", main = "weekday",
xlab = "Time (minutes)", ylab = "Average Number of Steps Taken")
plot(times, averageSteps2weekend, type = "l", main = "weekend",
xlab = NULL, ylab = "Average Number of Steps Taken")
plot(times, averageSteps2weekday, type = "l", main = "weekday",
xlab = "Time (minutes)", ylab = "Average Number of Steps Taken")
plot(times, averageSteps2weekend, type = "l", main = "weekend",
xlab = "", ylab = "Average Number of Steps Taken")
plot(times, averageSteps2weekday, type = "l", main = "weekday",
xlab = "Time (minutes)", ylab = "Average Number of Steps Taken")
plot(times, averageSteps2weekend, type = "l", main = "weekend",
xlab = , ylab = "Average Number of Steps Taken")
plot(times, averageSteps2weekday, type = "l", main = "weekday",
xlab = "Time (minutes)", ylab = "Average Number of Steps Taken")
library("lattice", lib.loc="C:/Program Files/R/R-3.1.0/library")
xyplot(averageStep2weekend~times)
xyplot(averageSteps2weekend~times)
xyplot(averageSteps2weekend|averageSteps2weekday~times)
xyplot(averageSteps2weekend~times)
xyplot(averageSteps2weekend~times, grid = TRUE)
averageSteps2 <- rbind(averageSteps2weekend,averageSteps2weekday)
View(averageSteps2)
View(averageSteps2)
averageSteps2 <- cbind(averageSteps2weekend,averageSteps2weekday)
View(averageSteps2)
View(averageSteps2)
data3 <- rbind(cbind(times, averageSteps2weekend), cbind(times, averageSteps2weekday))
View(data3)
View(data3)
names(data3)
name(data3)
View(data3)
? names
data3 <- rbind(cbind(times, averageSteps2weekend, "weekend"),
cbind(times, averageSteps2weekday, "weekday"))
View(data3)
View(data3)
data3 <- rbind(cbind(times, averageSteps2weekend, 1),
cbind(times, averageSteps2weekday, 0))
names(data3) <- c("interval", "averagesteps", "partofweek")
data3$partofweek <- factor(data3$partofweek, labels = c("weekday", "weekend"))
View(data3)
View(data3)
data3[,3] <- factor(data3[,3], labels = c("weekday", "weekend"))
View(data3)
View(data3)
data3 <- rbind(cbind(times, averageSteps2weekend, 1),
cbind(times, averageSteps2weekday, 0))
names(data3) <- c("interval", "averagesteps", "partofweek")
data3[,3] <- factor(data3[,3], labels = c("weekday", "weekend"))
View(data3)
View(data3)
data3 <- rbind(cbind(times, averageSteps2weekend, 1),
cbind(times, averageSteps2weekday, 0))
View(data3)
View(data3)
colnames(data3) <- c("interval", "averagesteps", "partofweek")
data3$partofweek <- factor(data3$partofweek, labels = c("weekday", "weekend"))
View(data3)
View(data3)
data3[,3] <- factor(data3[,3], labels = c("weekday", "weekend"))
View(data3)
View(data3)
data3 <- rbind(cbind(times, averageSteps2weekend, 1),
cbind(times, averageSteps2weekday, 0))
colnames(data3) <- c("interval", "averagesteps", "partofweek")
View(data3)
View(data3)
data3[,3]
data3[1,3]
typeof(data3[1,3])
data3[,3] <- factor(data3[,3], levels= c(0,1), labels = c("weekday", "weekend"))
View(data3)
View(data3)
data3$partofweek
data3 <- as.data.frame(rbind(cbind(times, averageSteps2weekend, 1),
cbind(times, averageSteps2weekday, 0)))
colnames(data3) <- c("interval", "averagesteps", "partofweek")
data3$partofweek
data3$partofweek <- factor(data3$partofweek, levels= c(0,1), labels = c("weekday", "weekend"))
View(data3)
View(data3)
xyplot(averagesteps~interval, data3, group = partofweek)
xyplot(averagesteps~interval|group, data3, group = partofweek)
xyplot(averagesteps~interval | partofweek, data3, group = partofweek)
xyplot(averagesteps~interval | partofweek, data3, group = partofweek, grid = TRUE)
data3 <- as.data.frame(rbind(cbind(times, averageSteps2weekend, 1),
cbind(times, averageSteps2weekday, 0)))
colnames(data3) <- c("interval", "averagesteps", "partofweek")
data3$partofweek <- factor(data3$partofweek, levels= c(0,1), labels = c("Weekday", "Weekend"))
xyplot(averagesteps~interval | partofweek, data3, group = partofweek, grid = TRUE,
xlab = "Time (minutes)", ylab = "Average Number of Steps Taken")
xyplot(averagesteps~interval | partofweek, data = data3, group = partofweek, grid = TRUE,
xlab = "Time (minutes)", ylab = "Average Number of Steps Taken", type = "o")
xyplot(averagesteps~interval | partofweek, data = data3, group = partofweek, grid = TRUE,
xlab = "Time (minutes)", ylab = "Average Number of Steps Taken", type = "a")
xyplot(averagesteps~interval | partofweek, data = data3, group = partofweek, grid = TRUE,
xlab = "Time (minutes)", ylab = "Average Number of Steps Taken", type = c("p", "a"))
data3 <- omit.na(data3)
data3 <- na.omit(data3)
View(data3)
View(data3)
xyplot(averagesteps~interval | partofweek, data = data3, group = partofweek,
grid = TRUE, type = "a", layout = c(1,2),
xlab = "Time (minutes)", ylab = "Average Number of Steps Taken")
xyplot(averagesteps~interval | partofweek, data = data3, group = partofweek,
grid = TRUE, type = "1", layout = c(1,2),
xlab = "Time (minutes)", ylab = "Average Number of Steps Taken")
xyplot(averagesteps~interval | partofweek, data = data3, group = partofweek,
grid = TRUE, type = "a", layout = c(1,2),
xlab = "Time (minutes)", ylab = "Average Number of Steps Taken")
